package database;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GradeSQL {

    private static volatile GradeSQL instance;

    public static GradeSQL getInstance() {
        if (instance == null) {
            synchronized (GradeSQL.class) {
                if (instance == null) {
                    instance = new GradeSQL();
                }
            }
        }
        return instance;
    }

    public void AddGrade(Context context, Map<String, Object> enrollmentData) {
        SQLiteDatabaseHelper dbHelper = new SQLiteDatabaseHelper(context);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        db.beginTransaction();

        try {
            String studentId = String.valueOf(enrollmentData.get("studentId"));
            String subjectId = String.valueOf(enrollmentData.get("subjectId"));

            int studentID = Integer.parseInt(studentId);
            int subjectID = Integer.parseInt(subjectId);

            // First insert into Grade table
            ContentValues gradeValues = new ContentValues();
            gradeValues.put("StudentID", studentID);

            // Insert grade and get generated ID
            long gradeId = db.insert("Grade", null, gradeValues);

            if (gradeId == -1) {
                throw new Exception("Failed to insert grade");
            }

            // Insert into Enrollment table with auto-incrementing EnrollmentID
            ContentValues enrollmentValues = new ContentValues();
            // EnrollmentID will be auto-generated by SQLite
            enrollmentValues.put("StudentID", studentID);
            enrollmentValues.put("SubjectID", subjectID);
            enrollmentValues.put("GradeID", gradeId);
            enrollmentValues.put("EnrollmentStatus", true);

            long enrollmentResult = db.insert("Enrollment", null, enrollmentValues);

            if (enrollmentResult == -1) {
                throw new Exception("Failed to insert enrollment");
            }

            db.setTransactionSuccessful();
            Toast.makeText(context, "Grade added successfully", Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(context, "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
            Log.e("GradeSQL", "Error adding grade: " + e.getMessage());
        } finally {
            db.endTransaction();
            db.close();
        }
    }

    public List<Map<String, Object>> GetGrade(Context context) {
        SQLiteDatabaseHelper dbHelper = new SQLiteDatabaseHelper(context);
        SQLiteDatabase db = dbHelper.getReadableDatabase();
        List<Map<String, Object>> gradeList = new ArrayList<>();

        String query = "SELECT e.EnrollmentID, e.GradeID, s.FirstName, s.LastName, sub.SubjectName, e.EnrollmentStatus " +
                "FROM Enrollment e " +
                "JOIN Student s ON e.StudentID = s.StudentID " +
                "JOIN Subject sub ON e.SubjectID = sub.SubjectID " +
                "JOIN Grade g ON e.GradeID = g.GradeID";

        Cursor cursor = db.rawQuery(query, null);

        if (cursor.moveToFirst()) {
            do {
                Map<String, Object> gradeData = new HashMap<>();
                gradeData.put("enrollmentID", cursor.getString(0));
                gradeData.put("gradeID", cursor.getString(1));
                String fullName = cursor.getString(2) + " " + cursor.getString(3);
                gradeData.put("studentName", fullName);
                gradeData.put("subjectName", cursor.getString(4));
                gradeData.put("enrollmentStatus", cursor.getInt(5) == 1);
                gradeList.add(gradeData);
            } while (cursor.moveToNext());
        }

        cursor.close();
        db.close();
        return gradeList;
    }

    public void deleteGrade(Context context, String gradeID, String enrollmentID) {
        SQLiteDatabaseHelper dbHelper = new SQLiteDatabaseHelper(context);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        db.beginTransaction();

        try {
            String whereClauseEnrollment = "GradeID = ?";
            String whereClauseGrade = "GradeID = ?";
            String[] whereArgs = {gradeID};

            // Delete from Enrollment table first (child table)
            int enrollmentRowsDeleted = db.delete("Enrollment", whereClauseEnrollment, whereArgs);

            // Then delete from Grade table (parent table)
            int gradeRowsDeleted = db.delete("Grade", whereClauseGrade, whereArgs);

            if (enrollmentRowsDeleted > 0 && gradeRowsDeleted > 0) {
                db.setTransactionSuccessful();
                Toast.makeText(context, "Grade deleted successfully", Toast.LENGTH_SHORT).show();
            } else {
                throw new Exception("No grade found with the given ID");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(context, "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
            Log.e("GradeSQL", "Error deleting grade: " + e.getMessage());
        } finally {
            db.endTransaction();
            db.close();
        }
    }
}
